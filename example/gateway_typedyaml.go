package example

// Code generated by "typedyaml -package example -interface Gateway *UserGateway *OrdersGateway"; DO NOT EDIT.

import (
	"bytes"
	"errors"

	"github.com/goccy/go-yaml"
)

type GatewayTyped struct {
	Gateway
}

func (t GatewayTyped) MarshalYAML() ([]byte, error) {
	if t.Gateway == nil {
		return nil, errors.New("nil value in GatewayTyped.Gateway")
	}
	return yaml.Marshal(
		yaml.MapSlice{
			{
				Key:   "type",
				Value: t.Gateway.TypedYAML(nil),
			},
			{
				Key:   "value",
				Value: t.Gateway,
			},
		},
	)
}

func (t *GatewayTyped) UnmarshalYAML(b []byte) error {
	var extractedType string
	if path, err := yaml.PathString("$.type"); err != nil {
		return err
	} else if err = path.Read(bytes.NewReader(b), &extractedType); err != nil {
		return err
	}
	path, err := yaml.PathString("$.value")
	if err != nil {
		return err
	}
	t.Gateway, err = resolveGateway(extractedType)
	if err != nil {
		return err
	}
	if err = path.Read(bytes.NewReader(b), t.Gateway); err != nil {
		return err
	}
	return nil
}

func resolveGateway(extractedType string) (Gateway, error) {
	switch extractedType {
	case "UserGateway":
		return &UserGateway{}, nil
	case "OrdersGateway":
		return &OrdersGateway{}, nil

	default:
		return nil, errors.New("unknown type: " + extractedType)
	}
}

func (s *UserGateway) TypedYAML(*GatewayTyped) string {
	return "UserGateway"
}

func (s *OrdersGateway) TypedYAML(*GatewayTyped) string {
	return "OrdersGateway"
}
