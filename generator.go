package main

import (
	"io"
	"strings"
	"text/template"
)

type options struct {
	OutputPath string
	Interface  string
	Typed      string
	Package    string
	Imports    []string
	Structs    []singleStruct
	AllArgs    []string
}

type singleStruct struct {
	Type  string
	Alias string
}

func generateCode(genArgs *options, out io.Writer) error {
	tmpl := template.Must(template.New("gen").
		Funcs(template.FuncMap{
			"join":      strings.Join,
			"isPointer": isPointer,
			"trimStar":  trimStar,
		}).
		Parse(tmplRaw))
	err := tmpl.Execute(out, genArgs)
	if err != nil {
		return err
	}

	return nil
}

func isPointer(name string) bool {
	return len(name) > 0 && name[0] == '*'
}

func trimStar(name string) string {
	return strings.TrimLeft(name, "*")
}

var tmplRaw = `package {{.Package}}

// Code generated by "{{join .AllArgs " "}}"; DO NOT EDIT.

import (
	"github.com/goccy/go-yaml"
	"errors"

	{{ range .Imports -}} 
		"{{ . }}" 
	{{ end }}
) 

type {{.Typed}} struct {
	{{.Interface}}
} 

func (t {{.Typed}}) MarshalYAML() ([]byte, error) {
	if t.{{.Interface}} == nil {
		return nil, errors.New("nil value in {{.Typed}}.{{.Interface}}")
	}
	return yaml.Marshal(
		yaml.MapSlice{
			{
				Key:   "type",
				Value: t.{{.Interface}}.TypedYAML(nil),
			},
			{
				Key:   "value",
				Value: t.{{.Interface}},
			},
		},
	)
} 

func (t *{{.Typed}}) UnmarshalYAML(b []byte) error {
	var extractedType string
	if path, err := yaml.PathString("$.type"); err != nil {
		return err
	} else if err = path.Read(bytes.NewReader(b), &extractedType); err != nil {
		return err
	}
	path, err := yaml.PathString("$.value")
	if err != nil {
		return err
	}
	t.{{.Interface}}, err = resolve{{.Interface}}(extractedType)
	if err != nil {
		return err
	}
	if err = path.Read(bytes.NewReader(b), t.{{.Interface}}); err != nil {
		return err
	}
	return nil
}

func resolve{{.Interface}}(extractedType string) ({{.Interface}}, error) {
	switch extractedType {
	{{- range .Structs }}
	{{- if isPointer .Type -}}
	case "{{trimStar .Alias}}":
		return &{{trimStar .Type }}{}, nil
	{{else -}}
	case "{{trimStar .Alias}}":
		return {{ .Type }}{}, nil
	{{- end }}{{ end }}
	default:
		return nil, errors.New("unknown type: " + extractedType)
	}
}

{{ range .Structs }}
func (s {{.Type}}) TypedYAML(*{{$.Typed}}) string {
	return "{{trimStar .Alias}}"
}

{{ end }}
`
